// Don't modify, generated file from C:/aseprite/data/strings/en.ini

#ifndef GENERATED_STRINGS_INI_H_INCLUDED
#define GENERATED_STRINGS_INI_H_INCLUDED
#pragma once

namespace app {
namespace gen {

  template<typename T>
  class Strings {
  public:
    static const std::string& advanced_mode_description() { return T::instance()->translate("advanced_mode.description"); }
    static const std::string& advanced_mode_title() { return T::instance()->translate("advanced_mode.title"); }
    static const std::string& alerts_applying_filter() { return T::instance()->translate("alerts.applying_filter"); }
    static const std::string& alerts_auto_remap() { return T::instance()->translate("alerts.auto_remap"); }
    static const std::string& alerts_cannot_delete_all_layers() { return T::instance()->translate("alerts.cannot_delete_all_layers"); }
    static const std::string& alerts_cannot_file_overwrite_on_export() { return T::instance()->translate("alerts.cannot_file_overwrite_on_export"); }
    static const std::string& alerts_cannot_open_file() { return T::instance()->translate("alerts.cannot_open_file"); }
    static const std::string& alerts_cannot_open_folder() { return T::instance()->translate("alerts.cannot_open_folder"); }
    static const std::string& alerts_cannot_save_in_read_only_file() { return T::instance()->translate("alerts.cannot_save_in_read_only_file"); }
    static const std::string& alerts_clipboard_access_locked() { return T::instance()->translate("alerts.clipboard_access_locked"); }
    static const std::string& alerts_clipboard_image_format_not_supported() { return T::instance()->translate("alerts.clipboard_image_format_not_supported"); }
    static const std::string& alerts_delete_selected_backups() { return T::instance()->translate("alerts.delete_selected_backups"); }
    static const std::string& alerts_delete_shortcut() { return T::instance()->translate("alerts.delete_shortcut"); }
    static const std::string& alerts_empty_rect_importing_sprite_sheet() { return T::instance()->translate("alerts.empty_rect_importing_sprite_sheet"); }
    static const std::string& alerts_error_loading_file() { return T::instance()->translate("alerts.error_loading_file"); }
    static const std::string& alerts_error_saving_file() { return T::instance()->translate("alerts.error_saving_file"); }
    static const std::string& alerts_export_animation_in_sequence() { return T::instance()->translate("alerts.export_animation_in_sequence"); }
    static const std::string& alerts_file_format_alpha_channel() { return T::instance()->translate("alerts.file_format_alpha_channel"); }
    static const std::string& alerts_file_format_doesnt_support_error() { return T::instance()->translate("alerts.file_format_doesnt_support_error"); }
    static const std::string& alerts_file_format_doesnt_support_warning() { return T::instance()->translate("alerts.file_format_doesnt_support_warning"); }
    static const std::string& alerts_file_format_frame_tags() { return T::instance()->translate("alerts.file_format_frame_tags"); }
    static const std::string& alerts_file_format_frames() { return T::instance()->translate("alerts.file_format_frames"); }
    static const std::string& alerts_file_format_grayscale_mode() { return T::instance()->translate("alerts.file_format_grayscale_mode"); }
    static const std::string& alerts_file_format_indexed_mode() { return T::instance()->translate("alerts.file_format_indexed_mode"); }
    static const std::string& alerts_file_format_layers() { return T::instance()->translate("alerts.file_format_layers"); }
    static const std::string& alerts_file_format_palette_changes() { return T::instance()->translate("alerts.file_format_palette_changes"); }
    static const std::string& alerts_file_format_rgb_mode() { return T::instance()->translate("alerts.file_format_rgb_mode"); }
    static const std::string& alerts_invalid_chars_in_filename() { return T::instance()->translate("alerts.invalid_chars_in_filename"); }
    static const std::string& alerts_invalid_fg_or_bg_colors() { return T::instance()->translate("alerts.invalid_fg_or_bg_colors"); }
    static const std::string& alerts_job_working() { return T::instance()->translate("alerts.job_working"); }
    static const std::string& alerts_nothing_to_report() { return T::instance()->translate("alerts.nothing_to_report"); }
    static const std::string& alerts_overwrite_existent_file() { return T::instance()->translate("alerts.overwrite_existent_file"); }
    static const std::string& alerts_overwrite_files_on_export() { return T::instance()->translate("alerts.overwrite_files_on_export"); }
    static const std::string& alerts_overwrite_files_on_export_sprite_sheet() { return T::instance()->translate("alerts.overwrite_files_on_export_sprite_sheet"); }
    static const std::string& alerts_recent_file_doesnt_exist() { return T::instance()->translate("alerts.recent_file_doesnt_exist"); }
    static const std::string& alerts_recent_folder_doesnt_exist() { return T::instance()->translate("alerts.recent_folder_doesnt_exist"); }
    static const std::string& alerts_restart_by_preferences() { return T::instance()->translate("alerts.restart_by_preferences"); }
    static const std::string& alerts_restart_by_preferences_save_recovery_data_period() { return T::instance()->translate("alerts.restart_by_preferences_save_recovery_data_period"); }
    static const std::string& alerts_restore_all_shortcuts() { return T::instance()->translate("alerts.restore_all_shortcuts"); }
    static const std::string& alerts_save_sprite_changes() { return T::instance()->translate("alerts.save_sprite_changes"); }
    static const std::string& alerts_save_sprite_changes_closing() { return T::instance()->translate("alerts.save_sprite_changes_closing"); }
    static const std::string& alerts_save_sprite_changes_quitting() { return T::instance()->translate("alerts.save_sprite_changes_quitting"); }
    static const std::string& alerts_uninstall_extension_warning() { return T::instance()->translate("alerts.uninstall_extension_warning"); }
    static const std::string& alerts_update_extension() { return T::instance()->translate("alerts.update_extension"); }
    static const std::string& alerts_update_extension_downgrade() { return T::instance()->translate("alerts.update_extension_downgrade"); }
    static const std::string& alerts_update_extension_upgrade() { return T::instance()->translate("alerts.update_extension_upgrade"); }
    static const std::string& alerts_update_screen_ui_scaling_with_theme_values() { return T::instance()->translate("alerts.update_screen_ui_scaling_with_theme_values"); }
    static const std::string& brush_slot_params_background() { return T::instance()->translate("brush_slot_params.background"); }
    static const std::string& brush_slot_params_brush() { return T::instance()->translate("brush_slot_params.brush"); }
    static const std::string& brush_slot_params_brush_angle() { return T::instance()->translate("brush_slot_params.brush_angle"); }
    static const std::string& brush_slot_params_brush_size() { return T::instance()->translate("brush_slot_params.brush_size"); }
    static const std::string& brush_slot_params_brush_type() { return T::instance()->translate("brush_slot_params.brush_type"); }
    static const std::string& brush_slot_params_color() { return T::instance()->translate("brush_slot_params.color"); }
    static const std::string& brush_slot_params_extras() { return T::instance()->translate("brush_slot_params.extras"); }
    static const std::string& brush_slot_params_foreground() { return T::instance()->translate("brush_slot_params.foreground"); }
    static const std::string& brush_slot_params_image_color() { return T::instance()->translate("brush_slot_params.image_color"); }
    static const std::string& brush_slot_params_ink() { return T::instance()->translate("brush_slot_params.ink"); }
    static const std::string& brush_slot_params_ink_opacity() { return T::instance()->translate("brush_slot_params.ink_opacity"); }
    static const std::string& brush_slot_params_ink_type() { return T::instance()->translate("brush_slot_params.ink_type"); }
    static const std::string& brush_slot_params_pixel_perfect() { return T::instance()->translate("brush_slot_params.pixel_perfect"); }
    static const std::string& brush_slot_params_shade() { return T::instance()->translate("brush_slot_params.shade"); }
    static const std::string& canvas_size_borders() { return T::instance()->translate("canvas_size.borders"); }
    static const std::string& canvas_size_bottom() { return T::instance()->translate("canvas_size.bottom"); }
    static const std::string& canvas_size_bottom_tooltip() { return T::instance()->translate("canvas_size.bottom_tooltip"); }
    static const std::string& canvas_size_height() { return T::instance()->translate("canvas_size.height"); }
    static const std::string& canvas_size_left() { return T::instance()->translate("canvas_size.left"); }
    static const std::string& canvas_size_left_tooltip() { return T::instance()->translate("canvas_size.left_tooltip"); }
    static const std::string& canvas_size_right() { return T::instance()->translate("canvas_size.right"); }
    static const std::string& canvas_size_right_tooltip() { return T::instance()->translate("canvas_size.right_tooltip"); }
    static const std::string& canvas_size_size() { return T::instance()->translate("canvas_size.size"); }
    static const std::string& canvas_size_title() { return T::instance()->translate("canvas_size.title"); }
    static const std::string& canvas_size_top() { return T::instance()->translate("canvas_size.top"); }
    static const std::string& canvas_size_top_tooltip() { return T::instance()->translate("canvas_size.top_tooltip"); }
    static const std::string& canvas_size_width() { return T::instance()->translate("canvas_size.width"); }
    static const std::string& cel_movement_popup_menu_cancel() { return T::instance()->translate("cel_movement_popup_menu.cancel"); }
    static const std::string& cel_movement_popup_menu_copy() { return T::instance()->translate("cel_movement_popup_menu.copy"); }
    static const std::string& cel_movement_popup_menu_move() { return T::instance()->translate("cel_movement_popup_menu.move"); }
    static const std::string& cel_popup_menu_clear() { return T::instance()->translate("cel_popup_menu.clear"); }
    static const std::string& cel_popup_menu_link_cels() { return T::instance()->translate("cel_popup_menu.link_cels"); }
    static const std::string& cel_popup_menu_unlink() { return T::instance()->translate("cel_popup_menu.unlink"); }
    static const std::string& cel_properties_opacity() { return T::instance()->translate("cel_properties.opacity"); }
    static const std::string& cel_properties_title() { return T::instance()->translate("cel_properties.title"); }
    static const std::string& cel_properties_user_data_tooltip() { return T::instance()->translate("cel_properties.user_data_tooltip"); }
    static const std::string& color_curve_point_cancel() { return T::instance()->translate("color_curve_point.cancel"); }
    static const std::string& color_curve_point_delete() { return T::instance()->translate("color_curve_point.delete"); }
    static const std::string& color_curve_point_ok() { return T::instance()->translate("color_curve_point.ok"); }
    static const std::string& color_curve_point_title() { return T::instance()->translate("color_curve_point.title"); }
    static const std::string& color_curve_point_x() { return T::instance()->translate("color_curve_point.x"); }
    static const std::string& color_curve_point_y() { return T::instance()->translate("color_curve_point.y"); }
    static const std::string& color_mode_flatten() { return T::instance()->translate("color_mode.flatten"); }
    static const std::string& color_mode_title() { return T::instance()->translate("color_mode.title"); }
    static const std::string& commands_About() { return T::instance()->translate("commands.About"); }
    static const std::string& commands_AddColor() { return T::instance()->translate("commands.AddColor"); }
    static const std::string& commands_AddColor_Background() { return T::instance()->translate("commands.AddColor_Background"); }
    static const std::string& commands_AddColor_Foreground() { return T::instance()->translate("commands.AddColor_Foreground"); }
    static const std::string& commands_AddColor_Specific() { return T::instance()->translate("commands.AddColor_Specific"); }
    static const std::string& commands_AdvancedMode() { return T::instance()->translate("commands.AdvancedMode"); }
    static const std::string& commands_AutocropSprite() { return T::instance()->translate("commands.AutocropSprite"); }
    static const std::string& commands_BackgroundFromLayer() { return T::instance()->translate("commands.BackgroundFromLayer"); }
    static const std::string& commands_BrightnessContrast() { return T::instance()->translate("commands.BrightnessContrast"); }
    static const std::string& commands_Cancel() { return T::instance()->translate("commands.Cancel"); }
    static const std::string& commands_CanvasSize() { return T::instance()->translate("commands.CanvasSize"); }
    static const std::string& commands_CelProperties() { return T::instance()->translate("commands.CelProperties"); }
    static const std::string& commands_ChangeBrush() { return T::instance()->translate("commands.ChangeBrush"); }
    static const std::string& commands_ChangeBrush_CustomBrush() { return T::instance()->translate("commands.ChangeBrush_CustomBrush"); }
    static const std::string& commands_ChangeBrush_DecrementAngle() { return T::instance()->translate("commands.ChangeBrush_DecrementAngle"); }
    static const std::string& commands_ChangeBrush_DecrementSize() { return T::instance()->translate("commands.ChangeBrush_DecrementSize"); }
    static const std::string& commands_ChangeBrush_IncrementAngle() { return T::instance()->translate("commands.ChangeBrush_IncrementAngle"); }
    static const std::string& commands_ChangeBrush_IncrementSize() { return T::instance()->translate("commands.ChangeBrush_IncrementSize"); }
    static const std::string& commands_ChangeColor() { return T::instance()->translate("commands.ChangeColor"); }
    static const std::string& commands_ChangeColor_DecrementBgIndex() { return T::instance()->translate("commands.ChangeColor_DecrementBgIndex"); }
    static const std::string& commands_ChangeColor_DecrementFgIndex() { return T::instance()->translate("commands.ChangeColor_DecrementFgIndex"); }
    static const std::string& commands_ChangeColor_IncrementBgIndex() { return T::instance()->translate("commands.ChangeColor_IncrementBgIndex"); }
    static const std::string& commands_ChangeColor_IncrementFgIndex() { return T::instance()->translate("commands.ChangeColor_IncrementFgIndex"); }
    static const std::string& commands_ChangePixelFormat() { return T::instance()->translate("commands.ChangePixelFormat"); }
    static const std::string& commands_ChangePixelFormat_Grayscale() { return T::instance()->translate("commands.ChangePixelFormat_Grayscale"); }
    static const std::string& commands_ChangePixelFormat_Indexed() { return T::instance()->translate("commands.ChangePixelFormat_Indexed"); }
    static const std::string& commands_ChangePixelFormat_Indexed_OldDithering() { return T::instance()->translate("commands.ChangePixelFormat_Indexed_OldDithering"); }
    static const std::string& commands_ChangePixelFormat_Indexed_OrderedDithering() { return T::instance()->translate("commands.ChangePixelFormat_Indexed_OrderedDithering"); }
    static const std::string& commands_ChangePixelFormat_MoreOptions() { return T::instance()->translate("commands.ChangePixelFormat_MoreOptions"); }
    static const std::string& commands_ChangePixelFormat_RGB() { return T::instance()->translate("commands.ChangePixelFormat_RGB"); }
    static const std::string& commands_Clear() { return T::instance()->translate("commands.Clear"); }
    static const std::string& commands_ClearCel() { return T::instance()->translate("commands.ClearCel"); }
    static const std::string& commands_CloseAllFiles() { return T::instance()->translate("commands.CloseAllFiles"); }
    static const std::string& commands_CloseFile() { return T::instance()->translate("commands.CloseFile"); }
    static const std::string& commands_ColorCurve() { return T::instance()->translate("commands.ColorCurve"); }
    static const std::string& commands_ColorQuantization() { return T::instance()->translate("commands.ColorQuantization"); }
    static const std::string& commands_ContiguousFill() { return T::instance()->translate("commands.ContiguousFill"); }
    static const std::string& commands_ConvolutionMatrix() { return T::instance()->translate("commands.ConvolutionMatrix"); }
    static const std::string& commands_Copy() { return T::instance()->translate("commands.Copy"); }
    static const std::string& commands_CopyCel() { return T::instance()->translate("commands.CopyCel"); }
    static const std::string& commands_CopyMerged() { return T::instance()->translate("commands.CopyMerged"); }
    static const std::string& commands_CropSprite() { return T::instance()->translate("commands.CropSprite"); }
    static const std::string& commands_Cut() { return T::instance()->translate("commands.Cut"); }
    static const std::string& commands_DeselectMask() { return T::instance()->translate("commands.DeselectMask"); }
    static const std::string& commands_Despeckle() { return T::instance()->translate("commands.Despeckle"); }
    static const std::string& commands_DeveloperConsole() { return T::instance()->translate("commands.DeveloperConsole"); }
    static const std::string& commands_DiscardBrush() { return T::instance()->translate("commands.DiscardBrush"); }
    static const std::string& commands_DuplicateLayer() { return T::instance()->translate("commands.DuplicateLayer"); }
    static const std::string& commands_DuplicateSprite() { return T::instance()->translate("commands.DuplicateSprite"); }
    static const std::string& commands_DuplicateView() { return T::instance()->translate("commands.DuplicateView"); }
    static const std::string& commands_Exit() { return T::instance()->translate("commands.Exit"); }
    static const std::string& commands_ExportSpriteSheet() { return T::instance()->translate("commands.ExportSpriteSheet"); }
    static const std::string& commands_Eyedropper() { return T::instance()->translate("commands.Eyedropper"); }
    static const std::string& commands_Fill() { return T::instance()->translate("commands.Fill"); }
    static const std::string& commands_FitScreen() { return T::instance()->translate("commands.FitScreen"); }
    static const std::string& commands_FlattenLayers() { return T::instance()->translate("commands.FlattenLayers"); }
    static const std::string& commands_Flip() { return T::instance()->translate("commands.Flip"); }
    static const std::string& commands_Flip_Canvas() { return T::instance()->translate("commands.Flip_Canvas"); }
    static const std::string& commands_Flip_Horizontally() { return T::instance()->translate("commands.Flip_Horizontally"); }
    static const std::string& commands_Flip_Selection() { return T::instance()->translate("commands.Flip_Selection"); }
    static const std::string& commands_Flip_Vertically() { return T::instance()->translate("commands.Flip_Vertically"); }
    static const std::string& commands_FrameProperties() { return T::instance()->translate("commands.FrameProperties"); }
    static const std::string& commands_FrameTagProperties() { return T::instance()->translate("commands.FrameTagProperties"); }
    static const std::string& commands_FullscreenPreview() { return T::instance()->translate("commands.FullscreenPreview"); }
    static const std::string& commands_GotoFirstFrame() { return T::instance()->translate("commands.GotoFirstFrame"); }
    static const std::string& commands_GotoFrame() { return T::instance()->translate("commands.GotoFrame"); }
    static const std::string& commands_GotoLastFrame() { return T::instance()->translate("commands.GotoLastFrame"); }
    static const std::string& commands_GotoNextFrame() { return T::instance()->translate("commands.GotoNextFrame"); }
    static const std::string& commands_GotoNextFrameWithSameTag() { return T::instance()->translate("commands.GotoNextFrameWithSameTag"); }
    static const std::string& commands_GotoNextLayer() { return T::instance()->translate("commands.GotoNextLayer"); }
    static const std::string& commands_GotoNextTab() { return T::instance()->translate("commands.GotoNextTab"); }
    static const std::string& commands_GotoPreviousFrame() { return T::instance()->translate("commands.GotoPreviousFrame"); }
    static const std::string& commands_GotoPreviousFrameWithSameTag() { return T::instance()->translate("commands.GotoPreviousFrameWithSameTag"); }
    static const std::string& commands_GotoPreviousLayer() { return T::instance()->translate("commands.GotoPreviousLayer"); }
    static const std::string& commands_GotoPreviousTab() { return T::instance()->translate("commands.GotoPreviousTab"); }
    static const std::string& commands_GridSettings() { return T::instance()->translate("commands.GridSettings"); }
    static const std::string& commands_Home() { return T::instance()->translate("commands.Home"); }
    static const std::string& commands_HueSaturation() { return T::instance()->translate("commands.HueSaturation"); }
    static const std::string& commands_ImportSpriteSheet() { return T::instance()->translate("commands.ImportSpriteSheet"); }
    static const std::string& commands_InvertColor() { return T::instance()->translate("commands.InvertColor"); }
    static const std::string& commands_InvertMask() { return T::instance()->translate("commands.InvertMask"); }
    static const std::string& commands_KeyboardShortcuts() { return T::instance()->translate("commands.KeyboardShortcuts"); }
    static const std::string& commands_Launch() { return T::instance()->translate("commands.Launch"); }
    static const std::string& commands_LayerFromBackground() { return T::instance()->translate("commands.LayerFromBackground"); }
    static const std::string& commands_LayerLock() { return T::instance()->translate("commands.LayerLock"); }
    static const std::string& commands_LayerOpacity() { return T::instance()->translate("commands.LayerOpacity"); }
    static const std::string& commands_LayerProperties() { return T::instance()->translate("commands.LayerProperties"); }
    static const std::string& commands_LayerVisibility() { return T::instance()->translate("commands.LayerVisibility"); }
    static const std::string& commands_LinkCels() { return T::instance()->translate("commands.LinkCels"); }
    static const std::string& commands_LoadMask() { return T::instance()->translate("commands.LoadMask"); }
    static const std::string& commands_LoadPalette() { return T::instance()->translate("commands.LoadPalette"); }
    static const std::string& commands_MaskAll() { return T::instance()->translate("commands.MaskAll"); }
    static const std::string& commands_MaskByColor() { return T::instance()->translate("commands.MaskByColor"); }
    static const std::string& commands_MaskContent() { return T::instance()->translate("commands.MaskContent"); }
    static const std::string& commands_MergeDownLayer() { return T::instance()->translate("commands.MergeDownLayer"); }
    static const std::string& commands_ModifySelection() { return T::instance()->translate("commands.ModifySelection"); }
    static const std::string& commands_ModifySelection_Border() { return T::instance()->translate("commands.ModifySelection_Border"); }
    static const std::string& commands_ModifySelection_Contract() { return T::instance()->translate("commands.ModifySelection_Contract"); }
    static const std::string& commands_ModifySelection_Expand() { return T::instance()->translate("commands.ModifySelection_Expand"); }
    static const std::string& commands_ModifySelection_Modify() { return T::instance()->translate("commands.ModifySelection_Modify"); }
    static const std::string& commands_ModifySelection_Quantity() { return T::instance()->translate("commands.ModifySelection_Quantity"); }
    static const std::string& commands_Move_Down() { return T::instance()->translate("commands.Move_Down"); }
    static const std::string& commands_Move_Left() { return T::instance()->translate("commands.Move_Left"); }
    static const std::string& commands_Move_Pixel() { return T::instance()->translate("commands.Move_Pixel"); }
    static const std::string& commands_Move_Right() { return T::instance()->translate("commands.Move_Right"); }
    static const std::string& commands_Move_Thing() { return T::instance()->translate("commands.Move_Thing"); }
    static const std::string& commands_Move_TileHeight() { return T::instance()->translate("commands.Move_TileHeight"); }
    static const std::string& commands_Move_TileWidth() { return T::instance()->translate("commands.Move_TileWidth"); }
    static const std::string& commands_Move_Up() { return T::instance()->translate("commands.Move_Up"); }
    static const std::string& commands_Move_ViewportHeight() { return T::instance()->translate("commands.Move_ViewportHeight"); }
    static const std::string& commands_Move_ViewportWidth() { return T::instance()->translate("commands.Move_ViewportWidth"); }
    static const std::string& commands_Move_ZoomedPixel() { return T::instance()->translate("commands.Move_ZoomedPixel"); }
    static const std::string& commands_Move_ZoomedTileHeight() { return T::instance()->translate("commands.Move_ZoomedTileHeight"); }
    static const std::string& commands_Move_ZoomedTileWidth() { return T::instance()->translate("commands.Move_ZoomedTileWidth"); }
    static const std::string& commands_MoveCel() { return T::instance()->translate("commands.MoveCel"); }
    static const std::string& commands_MoveMask() { return T::instance()->translate("commands.MoveMask"); }
    static const std::string& commands_MoveMask_Boundaries() { return T::instance()->translate("commands.MoveMask_Boundaries"); }
    static const std::string& commands_MoveMask_Content() { return T::instance()->translate("commands.MoveMask_Content"); }
    static const std::string& commands_NewBrush() { return T::instance()->translate("commands.NewBrush"); }
    static const std::string& commands_NewFile() { return T::instance()->translate("commands.NewFile"); }
    static const std::string& commands_NewFrame() { return T::instance()->translate("commands.NewFrame"); }
    static const std::string& commands_NewFrame_DuplicateCels() { return T::instance()->translate("commands.NewFrame_DuplicateCels"); }
    static const std::string& commands_NewFrame_DuplicateCelsBlock() { return T::instance()->translate("commands.NewFrame_DuplicateCelsBlock"); }
    static const std::string& commands_NewFrame_NewEmptyFrame() { return T::instance()->translate("commands.NewFrame_NewEmptyFrame"); }
    static const std::string& commands_NewFrameTag() { return T::instance()->translate("commands.NewFrameTag"); }
    static const std::string& commands_NewLayer() { return T::instance()->translate("commands.NewLayer"); }
    static const std::string& commands_NewSpriteFromSelection() { return T::instance()->translate("commands.NewSpriteFromSelection"); }
    static const std::string& commands_OpenBrowser() { return T::instance()->translate("commands.OpenBrowser"); }
    static const std::string& commands_OpenFile() { return T::instance()->translate("commands.OpenFile"); }
    static const std::string& commands_OpenGroup() { return T::instance()->translate("commands.OpenGroup"); }
    static const std::string& commands_OpenInFolder() { return T::instance()->translate("commands.OpenInFolder"); }
    static const std::string& commands_OpenWithApp() { return T::instance()->translate("commands.OpenWithApp"); }
    static const std::string& commands_Options() { return T::instance()->translate("commands.Options"); }
    static const std::string& commands_PaletteEditor() { return T::instance()->translate("commands.PaletteEditor"); }
    static const std::string& commands_PaletteEditor_And() { return T::instance()->translate("commands.PaletteEditor_And"); }
    static const std::string& commands_PaletteEditor_BgPopup() { return T::instance()->translate("commands.PaletteEditor_BgPopup"); }
    static const std::string& commands_PaletteEditor_Edit() { return T::instance()->translate("commands.PaletteEditor_Edit"); }
    static const std::string& commands_PaletteEditor_FgPopup() { return T::instance()->translate("commands.PaletteEditor_FgPopup"); }
    static const std::string& commands_PaletteSize() { return T::instance()->translate("commands.PaletteSize"); }
    static const std::string& commands_Paste() { return T::instance()->translate("commands.Paste"); }
    static const std::string& commands_PasteText() { return T::instance()->translate("commands.PasteText"); }
    static const std::string& commands_PixelPerfectMode() { return T::instance()->translate("commands.PixelPerfectMode"); }
    static const std::string& commands_PlayAnimation() { return T::instance()->translate("commands.PlayAnimation"); }
    static const std::string& commands_Redo() { return T::instance()->translate("commands.Redo"); }
    static const std::string& commands_Refresh() { return T::instance()->translate("commands.Refresh"); }
    static const std::string& commands_RemoveFrame() { return T::instance()->translate("commands.RemoveFrame"); }
    static const std::string& commands_RemoveFrameTag() { return T::instance()->translate("commands.RemoveFrameTag"); }
    static const std::string& commands_RemoveLayer() { return T::instance()->translate("commands.RemoveLayer"); }
    static const std::string& commands_RemoveSlice() { return T::instance()->translate("commands.RemoveSlice"); }
    static const std::string& commands_RepeatLastExport() { return T::instance()->translate("commands.RepeatLastExport"); }
    static const std::string& commands_ReplaceColor() { return T::instance()->translate("commands.ReplaceColor"); }
    static const std::string& commands_ReselectMask() { return T::instance()->translate("commands.ReselectMask"); }
    static const std::string& commands_ReverseFrames() { return T::instance()->translate("commands.ReverseFrames"); }
    static const std::string& commands_Rotate() { return T::instance()->translate("commands.Rotate"); }
    static const std::string& commands_Rotate_Selection() { return T::instance()->translate("commands.Rotate_Selection"); }
    static const std::string& commands_Rotate_Sprite() { return T::instance()->translate("commands.Rotate_Sprite"); }
    static const std::string& commands_RunScript() { return T::instance()->translate("commands.RunScript"); }
    static const std::string& commands_SaveFile() { return T::instance()->translate("commands.SaveFile"); }
    static const std::string& commands_SaveFileAs() { return T::instance()->translate("commands.SaveFileAs"); }
    static const std::string& commands_SaveFileCopyAs() { return T::instance()->translate("commands.SaveFileCopyAs"); }
    static const std::string& commands_SaveMask() { return T::instance()->translate("commands.SaveMask"); }
    static const std::string& commands_SavePalette() { return T::instance()->translate("commands.SavePalette"); }
    static const std::string& commands_Scroll() { return T::instance()->translate("commands.Scroll"); }
    static const std::string& commands_ScrollCenter() { return T::instance()->translate("commands.ScrollCenter"); }
    static const std::string& commands_SelectionAsGrid() { return T::instance()->translate("commands.SelectionAsGrid"); }
    static const std::string& commands_SelectTile() { return T::instance()->translate("commands.SelectTile"); }
    static const std::string& commands_SelectTile_Add() { return T::instance()->translate("commands.SelectTile_Add"); }
    static const std::string& commands_SelectTile_Subtract() { return T::instance()->translate("commands.SelectTile_Subtract"); }
    static const std::string& commands_SetColorSelector() { return T::instance()->translate("commands.SetColorSelector"); }
    static const std::string& commands_SetColorSelector_NormalMapWheel() { return T::instance()->translate("commands.SetColorSelector_NormalMapWheel"); }
    static const std::string& commands_SetColorSelector_RGBWheel() { return T::instance()->translate("commands.SetColorSelector_RGBWheel"); }
    static const std::string& commands_SetColorSelector_RYBWheel() { return T::instance()->translate("commands.SetColorSelector_RYBWheel"); }
    static const std::string& commands_SetColorSelector_Spectrum() { return T::instance()->translate("commands.SetColorSelector_Spectrum"); }
    static const std::string& commands_SetColorSelector_TintShadeTone() { return T::instance()->translate("commands.SetColorSelector_TintShadeTone"); }
    static const std::string& commands_SetInkType() { return T::instance()->translate("commands.SetInkType"); }
    static const std::string& commands_SetLoopSection() { return T::instance()->translate("commands.SetLoopSection"); }
    static const std::string& commands_SetPalette() { return T::instance()->translate("commands.SetPalette"); }
    static const std::string& commands_SetPaletteEntrySize() { return T::instance()->translate("commands.SetPaletteEntrySize"); }
    static const std::string& commands_SetSameInk() { return T::instance()->translate("commands.SetSameInk"); }
    static const std::string& commands_ShowAutoGuides() { return T::instance()->translate("commands.ShowAutoGuides"); }
    static const std::string& commands_ShowBrushes() { return T::instance()->translate("commands.ShowBrushes"); }
    static const std::string& commands_ShowBrushPreview() { return T::instance()->translate("commands.ShowBrushPreview"); }
    static const std::string& commands_ShowExtras() { return T::instance()->translate("commands.ShowExtras"); }
    static const std::string& commands_ShowGrid() { return T::instance()->translate("commands.ShowGrid"); }
    static const std::string& commands_ShowLayerEdges() { return T::instance()->translate("commands.ShowLayerEdges"); }
    static const std::string& commands_ShowOnionSkin() { return T::instance()->translate("commands.ShowOnionSkin"); }
    static const std::string& commands_ShowPaletteOptions() { return T::instance()->translate("commands.ShowPaletteOptions"); }
    static const std::string& commands_ShowPalettePresets() { return T::instance()->translate("commands.ShowPalettePresets"); }
    static const std::string& commands_ShowPaletteSortOptions() { return T::instance()->translate("commands.ShowPaletteSortOptions"); }
    static const std::string& commands_ShowPixelGrid() { return T::instance()->translate("commands.ShowPixelGrid"); }
    static const std::string& commands_ShowSelectionEdges() { return T::instance()->translate("commands.ShowSelectionEdges"); }
    static const std::string& commands_ShowSlices() { return T::instance()->translate("commands.ShowSlices"); }
    static const std::string& commands_SliceProperties() { return T::instance()->translate("commands.SliceProperties"); }
    static const std::string& commands_SnapToGrid() { return T::instance()->translate("commands.SnapToGrid"); }
    static const std::string& commands_SpriteProperties() { return T::instance()->translate("commands.SpriteProperties"); }
    static const std::string& commands_SpriteSize() { return T::instance()->translate("commands.SpriteSize"); }
    static const std::string& commands_Stroke() { return T::instance()->translate("commands.Stroke"); }
    static const std::string& commands_SwitchColors() { return T::instance()->translate("commands.SwitchColors"); }
    static const std::string& commands_SwitchNonactiveLayersOpacity() { return T::instance()->translate("commands.SwitchNonactiveLayersOpacity"); }
    static const std::string& commands_SymmetryMode() { return T::instance()->translate("commands.SymmetryMode"); }
    static const std::string& commands_TiledMode() { return T::instance()->translate("commands.TiledMode"); }
    static const std::string& commands_Timeline() { return T::instance()->translate("commands.Timeline"); }
    static const std::string& commands_TogglePreview() { return T::instance()->translate("commands.TogglePreview"); }
    static const std::string& commands_ToggleTimelineThumbnails() { return T::instance()->translate("commands.ToggleTimelineThumbnails"); }
    static const std::string& commands_Undo() { return T::instance()->translate("commands.Undo"); }
    static const std::string& commands_UndoHistory() { return T::instance()->translate("commands.UndoHistory"); }
    static const std::string& commands_UnlinkCel() { return T::instance()->translate("commands.UnlinkCel"); }
    static const std::string& commands_Zoom() { return T::instance()->translate("commands.Zoom"); }
    static const std::string& commands_Zoom_In() { return T::instance()->translate("commands.Zoom_In"); }
    static const std::string& commands_Zoom_Out() { return T::instance()->translate("commands.Zoom_Out"); }
    static const std::string& commands_Zoom_Set() { return T::instance()->translate("commands.Zoom_Set"); }
    static const std::string& convolution_matrix_reload_stock() { return T::instance()->translate("convolution_matrix.reload_stock"); }
    static const std::string& despeckle_height() { return T::instance()->translate("despeckle.height"); }
    static const std::string& despeckle_width() { return T::instance()->translate("despeckle.width"); }
    static const std::string& document_tab_popup_menu_duplicate_view() { return T::instance()->translate("document_tab_popup_menu.duplicate_view"); }
    static const std::string& document_tab_popup_menu_open_in_folder() { return T::instance()->translate("document_tab_popup_menu.open_in_folder"); }
    static const std::string& document_tab_popup_menu_open_with_os() { return T::instance()->translate("document_tab_popup_menu.open_with_os"); }
    static const std::string& duplicate_sprite_as() { return T::instance()->translate("duplicate_sprite.as"); }
    static const std::string& duplicate_sprite_duplicate() { return T::instance()->translate("duplicate_sprite.duplicate"); }
    static const std::string& duplicate_sprite_merged_layers() { return T::instance()->translate("duplicate_sprite.merged_layers"); }
    static const std::string& duplicate_sprite_title() { return T::instance()->translate("duplicate_sprite.title"); }
    static const std::string& export_file_adjust_resize() { return T::instance()->translate("export_file.adjust_resize"); }
    static const std::string& export_file_anidir() { return T::instance()->translate("export_file.anidir"); }
    static const std::string& export_file_cancel() { return T::instance()->translate("export_file.cancel"); }
    static const std::string& export_file_export() { return T::instance()->translate("export_file.export"); }
    static const std::string& export_file_for_twitter() { return T::instance()->translate("export_file.for_twitter"); }
    static const std::string& export_file_for_twitter_tooltip() { return T::instance()->translate("export_file.for_twitter_tooltip"); }
    static const std::string& export_file_frames() { return T::instance()->translate("export_file.frames"); }
    static const std::string& export_file_layers() { return T::instance()->translate("export_file.layers"); }
    static const std::string& export_file_output_file() { return T::instance()->translate("export_file.output_file"); }
    static const std::string& export_file_pixel_ratio() { return T::instance()->translate("export_file.pixel_ratio"); }
    static const std::string& export_file_resize() { return T::instance()->translate("export_file.resize"); }
    static const std::string& export_file_title() { return T::instance()->translate("export_file.title"); }
    static const std::string& export_sprite_sheet_best_fit() { return T::instance()->translate("export_sprite_sheet.best_fit"); }
    static const std::string& export_sprite_sheet_border() { return T::instance()->translate("export_sprite_sheet.border"); }
    static const std::string& export_sprite_sheet_cancel() { return T::instance()->translate("export_sprite_sheet.cancel"); }
    static const std::string& export_sprite_sheet_columns() { return T::instance()->translate("export_sprite_sheet.columns"); }
    static const std::string& export_sprite_sheet_export() { return T::instance()->translate("export_sprite_sheet.export"); }
    static const std::string& export_sprite_sheet_frames() { return T::instance()->translate("export_sprite_sheet.frames"); }
    static const std::string& export_sprite_sheet_height() { return T::instance()->translate("export_sprite_sheet.height"); }
    static const std::string& export_sprite_sheet_inner() { return T::instance()->translate("export_sprite_sheet.inner"); }
    static const std::string& export_sprite_sheet_json_data() { return T::instance()->translate("export_sprite_sheet.json_data"); }
    static const std::string& export_sprite_sheet_json_data_array() { return T::instance()->translate("export_sprite_sheet.json_data_array"); }
    static const std::string& export_sprite_sheet_json_data_hash() { return T::instance()->translate("export_sprite_sheet.json_data_hash"); }
    static const std::string& export_sprite_sheet_layers() { return T::instance()->translate("export_sprite_sheet.layers"); }
    static const std::string& export_sprite_sheet_meta() { return T::instance()->translate("export_sprite_sheet.meta"); }
    static const std::string& export_sprite_sheet_meta_frame_tags() { return T::instance()->translate("export_sprite_sheet.meta_frame_tags"); }
    static const std::string& export_sprite_sheet_meta_layers() { return T::instance()->translate("export_sprite_sheet.meta_layers"); }
    static const std::string& export_sprite_sheet_meta_slices() { return T::instance()->translate("export_sprite_sheet.meta_slices"); }
    static const std::string& export_sprite_sheet_open_sprite_sheet() { return T::instance()->translate("export_sprite_sheet.open_sprite_sheet"); }
    static const std::string& export_sprite_sheet_output_file() { return T::instance()->translate("export_sprite_sheet.output_file"); }
    static const std::string& export_sprite_sheet_padding() { return T::instance()->translate("export_sprite_sheet.padding"); }
    static const std::string& export_sprite_sheet_rows() { return T::instance()->translate("export_sprite_sheet.rows"); }
    static const std::string& export_sprite_sheet_shape() { return T::instance()->translate("export_sprite_sheet.shape"); }
    static const std::string& export_sprite_sheet_sheet_type() { return T::instance()->translate("export_sprite_sheet.sheet_type"); }
    static const std::string& export_sprite_sheet_title() { return T::instance()->translate("export_sprite_sheet.title"); }
    static const std::string& export_sprite_sheet_trim() { return T::instance()->translate("export_sprite_sheet.trim"); }
    static const std::string& export_sprite_sheet_width() { return T::instance()->translate("export_sprite_sheet.width"); }
    static const std::string& file_selector_file_name() { return T::instance()->translate("file_selector.file_name"); }
    static const std::string& file_selector_file_type() { return T::instance()->translate("file_selector.file_type"); }
    static const std::string& file_selector_go_back_button_tooltip() { return T::instance()->translate("file_selector.go_back_button_tooltip"); }
    static const std::string& file_selector_go_forward_button_tooltip() { return T::instance()->translate("file_selector.go_forward_button_tooltip"); }
    static const std::string& file_selector_go_up_button_tooltip() { return T::instance()->translate("file_selector.go_up_button_tooltip"); }
    static const std::string& file_selector_new_folder_button_tooltip() { return T::instance()->translate("file_selector.new_folder_button_tooltip"); }
    static const std::string& filters_all_cels() { return T::instance()->translate("filters.all_cels"); }
    static const std::string& filters_all_cels_tooltip() { return T::instance()->translate("filters.all_cels_tooltip"); }
    static const std::string& filters_selected_cels() { return T::instance()->translate("filters.selected_cels"); }
    static const std::string& filters_selected_cels_tooltip() { return T::instance()->translate("filters.selected_cels_tooltip"); }
    static const std::string& font_popup_load() { return T::instance()->translate("font_popup.load"); }
    static const std::string& frame_properties_duration() { return T::instance()->translate("frame_properties.duration"); }
    static const std::string& frame_properties_frame_number() { return T::instance()->translate("frame_properties.frame_number"); }
    static const std::string& frame_properties_title() { return T::instance()->translate("frame_properties.title"); }
    static const std::string& frame_tag_properties_ani_dir() { return T::instance()->translate("frame_tag_properties.ani_dir"); }
    static const std::string& frame_tag_properties_color() { return T::instance()->translate("frame_tag_properties.color"); }
    static const std::string& frame_tag_properties_from() { return T::instance()->translate("frame_tag_properties.from"); }
    static const std::string& frame_tag_properties_name() { return T::instance()->translate("frame_tag_properties.name"); }
    static const std::string& frame_tag_properties_title() { return T::instance()->translate("frame_tag_properties.title"); }
    static const std::string& frame_tag_properties_to() { return T::instance()->translate("frame_tag_properties.to"); }
    static const std::string& general_cancel() { return T::instance()->translate("general.cancel"); }
    static const std::string& general_close() { return T::instance()->translate("general.close"); }
    static const std::string& general_dont_show() { return T::instance()->translate("general.dont_show"); }
    static const std::string& general_dont_show_tooltip() { return T::instance()->translate("general.dont_show_tooltip"); }
    static const std::string& general_no() { return T::instance()->translate("general.no"); }
    static const std::string& general_ok() { return T::instance()->translate("general.ok"); }
    static const std::string& general_user_data() { return T::instance()->translate("general.user_data"); }
    static const std::string& general_yes() { return T::instance()->translate("general.yes"); }
    static const std::string& gif_options_animation_loop() { return T::instance()->translate("gif_options.animation_loop"); }
    static const std::string& gif_options_cancel() { return T::instance()->translate("gif_options.cancel"); }
    static const std::string& gif_options_general_options() { return T::instance()->translate("gif_options.general_options"); }
    static const std::string& gif_options_interlaced() { return T::instance()->translate("gif_options.interlaced"); }
    static const std::string& gif_options_ok() { return T::instance()->translate("gif_options.ok"); }
    static const std::string& gif_options_title() { return T::instance()->translate("gif_options.title"); }
    static const std::string& goto_frame_frame_or_tags() { return T::instance()->translate("goto_frame.frame_or_tags"); }
    static const std::string& goto_frame_title() { return T::instance()->translate("goto_frame.title"); }
    static const std::string& grid_settings_height() { return T::instance()->translate("grid_settings.height"); }
    static const std::string& grid_settings_title() { return T::instance()->translate("grid_settings.title"); }
    static const std::string& grid_settings_width() { return T::instance()->translate("grid_settings.width"); }
    static const std::string& grid_settings_x() { return T::instance()->translate("grid_settings.x"); }
    static const std::string& grid_settings_y() { return T::instance()->translate("grid_settings.y"); }
    static const std::string& home_view_checking_updates() { return T::instance()->translate("home_view.checking_updates"); }
    static const std::string& home_view_is_up_to_date() { return T::instance()->translate("home_view.is_up_to_date"); }
    static const std::string& home_view_new_file() { return T::instance()->translate("home_view.new_file"); }
    static const std::string& home_view_new_version_available() { return T::instance()->translate("home_view.new_version_available"); }
    static const std::string& home_view_news() { return T::instance()->translate("home_view.news"); }
    static const std::string& home_view_open_file() { return T::instance()->translate("home_view.open_file"); }
    static const std::string& home_view_recent_files() { return T::instance()->translate("home_view.recent_files"); }
    static const std::string& home_view_recent_folders() { return T::instance()->translate("home_view.recent_folders"); }
    static const std::string& home_view_recover() { return T::instance()->translate("home_view.recover"); }
    static const std::string& home_view_title() { return T::instance()->translate("home_view.title"); }
    static const std::string& import_sprite_sheet_cancel() { return T::instance()->translate("import_sprite_sheet.cancel"); }
    static const std::string& import_sprite_sheet_height() { return T::instance()->translate("import_sprite_sheet.height"); }
    static const std::string& import_sprite_sheet_import() { return T::instance()->translate("import_sprite_sheet.import"); }
    static const std::string& import_sprite_sheet_partial_tiles() { return T::instance()->translate("import_sprite_sheet.partial_tiles"); }
    static const std::string& import_sprite_sheet_select_file() { return T::instance()->translate("import_sprite_sheet.select_file"); }
    static const std::string& import_sprite_sheet_title() { return T::instance()->translate("import_sprite_sheet.title"); }
    static const std::string& import_sprite_sheet_type() { return T::instance()->translate("import_sprite_sheet.type"); }
    static const std::string& import_sprite_sheet_width() { return T::instance()->translate("import_sprite_sheet.width"); }
    static const std::string& import_sprite_sheet_x() { return T::instance()->translate("import_sprite_sheet.x"); }
    static const std::string& import_sprite_sheet_y() { return T::instance()->translate("import_sprite_sheet.y"); }
    static const std::string& ink_popup_menu_same_in_all_tools() { return T::instance()->translate("ink_popup_menu.same_in_all_tools"); }
    static const std::string& inks_alpha_compositing() { return T::instance()->translate("inks.alpha_compositing"); }
    static const std::string& inks_copy_color() { return T::instance()->translate("inks.copy_color"); }
    static const std::string& inks_lock_alpha() { return T::instance()->translate("inks.lock_alpha"); }
    static const std::string& inks_shading() { return T::instance()->translate("inks.shading"); }
    static const std::string& inks_simple_ink() { return T::instance()->translate("inks.simple_ink"); }
    static const std::string& jpeg_options_quality() { return T::instance()->translate("jpeg_options.quality"); }
    static const std::string& jpeg_options_title() { return T::instance()->translate("jpeg_options.title"); }
    static const std::string& keyboard_shortcuts_cancel() { return T::instance()->translate("keyboard_shortcuts.cancel"); }
    static const std::string& keyboard_shortcuts_export() { return T::instance()->translate("keyboard_shortcuts.export"); }
    static const std::string& keyboard_shortcuts_import() { return T::instance()->translate("keyboard_shortcuts.import"); }
    static const std::string& keyboard_shortcuts_ok() { return T::instance()->translate("keyboard_shortcuts.ok"); }
    static const std::string& keyboard_shortcuts_reset() { return T::instance()->translate("keyboard_shortcuts.reset"); }
    static const std::string& keyboard_shortcuts_title() { return T::instance()->translate("keyboard_shortcuts.title"); }
    static const std::string& layer_properties_mode() { return T::instance()->translate("layer_properties.mode"); }
    static const std::string& layer_properties_name() { return T::instance()->translate("layer_properties.name"); }
    static const std::string& layer_properties_opacity() { return T::instance()->translate("layer_properties.opacity"); }
    static const std::string& layer_properties_title() { return T::instance()->translate("layer_properties.title"); }
    static const std::string& main_menu_edit() { return T::instance()->translate("main_menu.edit"); }
    static const std::string& main_menu_edit_adjustments() { return T::instance()->translate("main_menu.edit_adjustments"); }
    static const std::string& main_menu_edit_adjustments_brightness_contrast() { return T::instance()->translate("main_menu.edit_adjustments_brightness_contrast"); }
    static const std::string& main_menu_edit_adjustments_color_curve() { return T::instance()->translate("main_menu.edit_adjustments_color_curve"); }
    static const std::string& main_menu_edit_adjustments_hue_saturation() { return T::instance()->translate("main_menu.edit_adjustments_hue_saturation"); }
    static const std::string& main_menu_edit_clear() { return T::instance()->translate("main_menu.edit_clear"); }
    static const std::string& main_menu_edit_copy() { return T::instance()->translate("main_menu.edit_copy"); }
    static const std::string& main_menu_edit_copy_merged() { return T::instance()->translate("main_menu.edit_copy_merged"); }
    static const std::string& main_menu_edit_cut() { return T::instance()->translate("main_menu.edit_cut"); }
    static const std::string& main_menu_edit_fill() { return T::instance()->translate("main_menu.edit_fill"); }
    static const std::string& main_menu_edit_flip_horizontal() { return T::instance()->translate("main_menu.edit_flip_horizontal"); }
    static const std::string& main_menu_edit_flip_vertical() { return T::instance()->translate("main_menu.edit_flip_vertical"); }
    static const std::string& main_menu_edit_fx() { return T::instance()->translate("main_menu.edit_fx"); }
    static const std::string& main_menu_edit_fx_convolution_matrix() { return T::instance()->translate("main_menu.edit_fx_convolution_matrix"); }
    static const std::string& main_menu_edit_fx_despeckle() { return T::instance()->translate("main_menu.edit_fx_despeckle"); }
    static const std::string& main_menu_edit_insert_text() { return T::instance()->translate("main_menu.edit_insert_text"); }
    static const std::string& main_menu_edit_invert_color() { return T::instance()->translate("main_menu.edit_invert_color"); }
    static const std::string& main_menu_edit_keyboard_shortcuts() { return T::instance()->translate("main_menu.edit_keyboard_shortcuts"); }
    static const std::string& main_menu_edit_new_brush() { return T::instance()->translate("main_menu.edit_new_brush"); }
    static const std::string& main_menu_edit_new_sprite_from_selection() { return T::instance()->translate("main_menu.edit_new_sprite_from_selection"); }
    static const std::string& main_menu_edit_paste() { return T::instance()->translate("main_menu.edit_paste"); }
    static const std::string& main_menu_edit_preferences() { return T::instance()->translate("main_menu.edit_preferences"); }
    static const std::string& main_menu_edit_redo() { return T::instance()->translate("main_menu.edit_redo"); }
    static const std::string& main_menu_edit_replace_color() { return T::instance()->translate("main_menu.edit_replace_color"); }
    static const std::string& main_menu_edit_rotate() { return T::instance()->translate("main_menu.edit_rotate"); }
    static const std::string& main_menu_edit_rotate_180() { return T::instance()->translate("main_menu.edit_rotate_180"); }
    static const std::string& main_menu_edit_rotate_90ccw() { return T::instance()->translate("main_menu.edit_rotate_90ccw"); }
    static const std::string& main_menu_edit_rotate_90cw() { return T::instance()->translate("main_menu.edit_rotate_90cw"); }
    static const std::string& main_menu_edit_shift() { return T::instance()->translate("main_menu.edit_shift"); }
    static const std::string& main_menu_edit_shift_down() { return T::instance()->translate("main_menu.edit_shift_down"); }
    static const std::string& main_menu_edit_shift_left() { return T::instance()->translate("main_menu.edit_shift_left"); }
    static const std::string& main_menu_edit_shift_right() { return T::instance()->translate("main_menu.edit_shift_right"); }
    static const std::string& main_menu_edit_shift_up() { return T::instance()->translate("main_menu.edit_shift_up"); }
    static const std::string& main_menu_edit_stroke() { return T::instance()->translate("main_menu.edit_stroke"); }
    static const std::string& main_menu_edit_transform() { return T::instance()->translate("main_menu.edit_transform"); }
    static const std::string& main_menu_edit_undo() { return T::instance()->translate("main_menu.edit_undo"); }
    static const std::string& main_menu_edit_undo_history() { return T::instance()->translate("main_menu.edit_undo_history"); }
    static const std::string& main_menu_file() { return T::instance()->translate("main_menu.file"); }
    static const std::string& main_menu_file_close() { return T::instance()->translate("main_menu.file_close"); }
    static const std::string& main_menu_file_close_all() { return T::instance()->translate("main_menu.file_close_all"); }
    static const std::string& main_menu_file_exit() { return T::instance()->translate("main_menu.file_exit"); }
    static const std::string& main_menu_file_export() { return T::instance()->translate("main_menu.file_export"); }
    static const std::string& main_menu_file_export_sprite_sheet() { return T::instance()->translate("main_menu.file_export_sprite_sheet"); }
    static const std::string& main_menu_file_import_sprite_sheet() { return T::instance()->translate("main_menu.file_import_sprite_sheet"); }
    static const std::string& main_menu_file_new() { return T::instance()->translate("main_menu.file_new"); }
    static const std::string& main_menu_file_open() { return T::instance()->translate("main_menu.file_open"); }
    static const std::string& main_menu_file_open_recent() { return T::instance()->translate("main_menu.file_open_recent"); }
    static const std::string& main_menu_file_repeat_last_export() { return T::instance()->translate("main_menu.file_repeat_last_export"); }
    static const std::string& main_menu_file_save() { return T::instance()->translate("main_menu.file_save"); }
    static const std::string& main_menu_file_save_as() { return T::instance()->translate("main_menu.file_save_as"); }
    static const std::string& main_menu_frame() { return T::instance()->translate("main_menu.frame"); }
    static const std::string& main_menu_frame_cel_properties() { return T::instance()->translate("main_menu.frame_cel_properties"); }
    static const std::string& main_menu_frame_constant_frame_rate() { return T::instance()->translate("main_menu.frame_constant_frame_rate"); }
    static const std::string& main_menu_frame_delete_frame() { return T::instance()->translate("main_menu.frame_delete_frame"); }
    static const std::string& main_menu_frame_duplicate_cels() { return T::instance()->translate("main_menu.frame_duplicate_cels"); }
    static const std::string& main_menu_frame_duplicate_linked_cels() { return T::instance()->translate("main_menu.frame_duplicate_linked_cels"); }
    static const std::string& main_menu_frame_go_to_frame() { return T::instance()->translate("main_menu.frame_go_to_frame"); }
    static const std::string& main_menu_frame_jump_to() { return T::instance()->translate("main_menu.frame_jump_to"); }
    static const std::string& main_menu_frame_jump_to_first_frame() { return T::instance()->translate("main_menu.frame_jump_to_first_frame"); }
    static const std::string& main_menu_frame_jump_to_last_frame() { return T::instance()->translate("main_menu.frame_jump_to_last_frame"); }
    static const std::string& main_menu_frame_jump_to_next_frame() { return T::instance()->translate("main_menu.frame_jump_to_next_frame"); }
    static const std::string& main_menu_frame_jump_to_previous_frame() { return T::instance()->translate("main_menu.frame_jump_to_previous_frame"); }
    static const std::string& main_menu_frame_new_empty_frame() { return T::instance()->translate("main_menu.frame_new_empty_frame"); }
    static const std::string& main_menu_frame_new_frame() { return T::instance()->translate("main_menu.frame_new_frame"); }
    static const std::string& main_menu_frame_play_animation() { return T::instance()->translate("main_menu.frame_play_animation"); }
    static const std::string& main_menu_frame_properties() { return T::instance()->translate("main_menu.frame_properties"); }
    static const std::string& main_menu_frame_reverse_frames() { return T::instance()->translate("main_menu.frame_reverse_frames"); }
    static const std::string& main_menu_frame_tags() { return T::instance()->translate("main_menu.frame_tags"); }
    static const std::string& main_menu_frame_tags_delete_tag() { return T::instance()->translate("main_menu.frame_tags_delete_tag"); }
    static const std::string& main_menu_frame_tags_new_tag() { return T::instance()->translate("main_menu.frame_tags_new_tag"); }
    static const std::string& main_menu_frame_tags_tag_properties() { return T::instance()->translate("main_menu.frame_tags_tag_properties"); }
    static const std::string& main_menu_help() { return T::instance()->translate("main_menu.help"); }
    static const std::string& main_menu_help_about() { return T::instance()->translate("main_menu.help_about"); }
    static const std::string& main_menu_help_documentation() { return T::instance()->translate("main_menu.help_documentation"); }
    static const std::string& main_menu_help_donate() { return T::instance()->translate("main_menu.help_donate"); }
    static const std::string& main_menu_help_quick_reference() { return T::instance()->translate("main_menu.help_quick_reference"); }
    static const std::string& main_menu_help_readme() { return T::instance()->translate("main_menu.help_readme"); }
    static const std::string& main_menu_help_release_notes() { return T::instance()->translate("main_menu.help_release_notes"); }
    static const std::string& main_menu_help_tutorial() { return T::instance()->translate("main_menu.help_tutorial"); }
    static const std::string& main_menu_help_twitter() { return T::instance()->translate("main_menu.help_twitter"); }
    static const std::string& main_menu_layer() { return T::instance()->translate("main_menu.layer"); }
    static const std::string& main_menu_layer_add_reference_layer() { return T::instance()->translate("main_menu.layer_add_reference_layer"); }
    static const std::string& main_menu_layer_background_from_layer() { return T::instance()->translate("main_menu.layer_background_from_layer"); }
    static const std::string& main_menu_layer_delete_layer() { return T::instance()->translate("main_menu.layer_delete_layer"); }
    static const std::string& main_menu_layer_duplicate() { return T::instance()->translate("main_menu.layer_duplicate"); }
    static const std::string& main_menu_layer_flatten() { return T::instance()->translate("main_menu.layer_flatten"); }
    static const std::string& main_menu_layer_layer_from_background() { return T::instance()->translate("main_menu.layer_layer_from_background"); }
    static const std::string& main_menu_layer_lock_layers() { return T::instance()->translate("main_menu.layer_lock_layers"); }
    static const std::string& main_menu_layer_merge_down() { return T::instance()->translate("main_menu.layer_merge_down"); }
    static const std::string& main_menu_layer_new_group() { return T::instance()->translate("main_menu.layer_new_group"); }
    static const std::string& main_menu_layer_new_layer() { return T::instance()->translate("main_menu.layer_new_layer"); }
    static const std::string& main_menu_layer_open_group() { return T::instance()->translate("main_menu.layer_open_group"); }
    static const std::string& main_menu_layer_properties() { return T::instance()->translate("main_menu.layer_properties"); }
    static const std::string& main_menu_layer_visible() { return T::instance()->translate("main_menu.layer_visible"); }
    static const std::string& main_menu_select() { return T::instance()->translate("main_menu.select"); }
    static const std::string& main_menu_select_all() { return T::instance()->translate("main_menu.select_all"); }
    static const std::string& main_menu_select_color_range() { return T::instance()->translate("main_menu.select_color_range"); }
    static const std::string& main_menu_select_deselect() { return T::instance()->translate("main_menu.select_deselect"); }
    static const std::string& main_menu_select_inverse() { return T::instance()->translate("main_menu.select_inverse"); }
    static const std::string& main_menu_select_load_from_file() { return T::instance()->translate("main_menu.select_load_from_file"); }
    static const std::string& main_menu_select_modify() { return T::instance()->translate("main_menu.select_modify"); }
    static const std::string& main_menu_select_modify_border() { return T::instance()->translate("main_menu.select_modify_border"); }
    static const std::string& main_menu_select_modify_contract() { return T::instance()->translate("main_menu.select_modify_contract"); }
    static const std::string& main_menu_select_modify_expand() { return T::instance()->translate("main_menu.select_modify_expand"); }
    static const std::string& main_menu_select_reselect() { return T::instance()->translate("main_menu.select_reselect"); }
    static const std::string& main_menu_select_save_to_file() { return T::instance()->translate("main_menu.select_save_to_file"); }
    static const std::string& main_menu_sprite() { return T::instance()->translate("main_menu.sprite"); }
    static const std::string& main_menu_sprite_canvas_size() { return T::instance()->translate("main_menu.sprite_canvas_size"); }
    static const std::string& main_menu_sprite_color_mode() { return T::instance()->translate("main_menu.sprite_color_mode"); }
    static const std::string& main_menu_sprite_color_mode_grayscale() { return T::instance()->translate("main_menu.sprite_color_mode_grayscale"); }
    static const std::string& main_menu_sprite_color_mode_indexed() { return T::instance()->translate("main_menu.sprite_color_mode_indexed"); }
    static const std::string& main_menu_sprite_color_mode_more_options() { return T::instance()->translate("main_menu.sprite_color_mode_more_options"); }
    static const std::string& main_menu_sprite_color_mode_rgb() { return T::instance()->translate("main_menu.sprite_color_mode_rgb"); }
    static const std::string& main_menu_sprite_crop() { return T::instance()->translate("main_menu.sprite_crop"); }
    static const std::string& main_menu_sprite_duplicate() { return T::instance()->translate("main_menu.sprite_duplicate"); }
    static const std::string& main_menu_sprite_flip_canvas_horizontal() { return T::instance()->translate("main_menu.sprite_flip_canvas_horizontal"); }
    static const std::string& main_menu_sprite_flip_canvas_vertical() { return T::instance()->translate("main_menu.sprite_flip_canvas_vertical"); }
    static const std::string& main_menu_sprite_properties() { return T::instance()->translate("main_menu.sprite_properties"); }
    static const std::string& main_menu_sprite_rotate() { return T::instance()->translate("main_menu.sprite_rotate"); }
    static const std::string& main_menu_sprite_rotate_180() { return T::instance()->translate("main_menu.sprite_rotate_180"); }
    static const std::string& main_menu_sprite_rotate_90ccw() { return T::instance()->translate("main_menu.sprite_rotate_90ccw"); }
    static const std::string& main_menu_sprite_rotate_90cw() { return T::instance()->translate("main_menu.sprite_rotate_90cw"); }
    static const std::string& main_menu_sprite_rotate_canvas() { return T::instance()->translate("main_menu.sprite_rotate_canvas"); }
    static const std::string& main_menu_sprite_sprite_size() { return T::instance()->translate("main_menu.sprite_sprite_size"); }
    static const std::string& main_menu_sprite_trim() { return T::instance()->translate("main_menu.sprite_trim"); }
    static const std::string& main_menu_view() { return T::instance()->translate("main_menu.view"); }
    static const std::string& main_menu_view_duplicate_view() { return T::instance()->translate("main_menu.view_duplicate_view"); }
    static const std::string& main_menu_view_full_screen_mode() { return T::instance()->translate("main_menu.view_full_screen_mode"); }
    static const std::string& main_menu_view_full_screen_preview() { return T::instance()->translate("main_menu.view_full_screen_preview"); }
    static const std::string& main_menu_view_grid() { return T::instance()->translate("main_menu.view_grid"); }
    static const std::string& main_menu_view_grid_selection_as_grid() { return T::instance()->translate("main_menu.view_grid_selection_as_grid"); }
    static const std::string& main_menu_view_grid_settings() { return T::instance()->translate("main_menu.view_grid_settings"); }
    static const std::string& main_menu_view_grid_snap_to_grid() { return T::instance()->translate("main_menu.view_grid_snap_to_grid"); }
    static const std::string& main_menu_view_home() { return T::instance()->translate("main_menu.view_home"); }
    static const std::string& main_menu_view_preview() { return T::instance()->translate("main_menu.view_preview"); }
    static const std::string& main_menu_view_refresh() { return T::instance()->translate("main_menu.view_refresh"); }
    static const std::string& main_menu_view_set_loop_section() { return T::instance()->translate("main_menu.view_set_loop_section"); }
    static const std::string& main_menu_view_show() { return T::instance()->translate("main_menu.view_show"); }
    static const std::string& main_menu_view_show_auto_guides() { return T::instance()->translate("main_menu.view_show_auto_guides"); }
    static const std::string& main_menu_view_show_brush_preview() { return T::instance()->translate("main_menu.view_show_brush_preview"); }
    static const std::string& main_menu_view_show_extras() { return T::instance()->translate("main_menu.view_show_extras"); }
    static const std::string& main_menu_view_show_grid() { return T::instance()->translate("main_menu.view_show_grid"); }
    static const std::string& main_menu_view_show_layer_edges() { return T::instance()->translate("main_menu.view_show_layer_edges"); }
    static const std::string& main_menu_view_show_onion_skin() { return T::instance()->translate("main_menu.view_show_onion_skin"); }
    static const std::string& main_menu_view_show_pixel_grid() { return T::instance()->translate("main_menu.view_show_pixel_grid"); }
    static const std::string& main_menu_view_show_selection_edges() { return T::instance()->translate("main_menu.view_show_selection_edges"); }
    static const std::string& main_menu_view_show_slices() { return T::instance()->translate("main_menu.view_show_slices"); }
    static const std::string& main_menu_view_symmetry_options() { return T::instance()->translate("main_menu.view_symmetry_options"); }
    static const std::string& main_menu_view_tiled_mode() { return T::instance()->translate("main_menu.view_tiled_mode"); }
    static const std::string& main_menu_view_tiled_mode_both() { return T::instance()->translate("main_menu.view_tiled_mode_both"); }
    static const std::string& main_menu_view_tiled_mode_none() { return T::instance()->translate("main_menu.view_tiled_mode_none"); }
    static const std::string& main_menu_view_tiled_mode_x() { return T::instance()->translate("main_menu.view_tiled_mode_x"); }
    static const std::string& main_menu_view_tiled_mode_y() { return T::instance()->translate("main_menu.view_tiled_mode_y"); }
    static const std::string& main_menu_view_timeline() { return T::instance()->translate("main_menu.view_timeline"); }
    static const std::string& modify_selection_circle() { return T::instance()->translate("modify_selection.circle"); }
    static const std::string& modify_selection_square() { return T::instance()->translate("modify_selection.square"); }
    static const std::string& modify_selection_title() { return T::instance()->translate("modify_selection.title"); }
    static const std::string& new_folder_default_new_folder_name() { return T::instance()->translate("new_folder.default_new_folder_name"); }
    static const std::string& new_folder_folder_name() { return T::instance()->translate("new_folder.folder_name"); }
    static const std::string& new_folder_title() { return T::instance()->translate("new_folder.title"); }
    static const std::string& new_layer_default_new_layer_name() { return T::instance()->translate("new_layer.default_new_layer_name"); }
    static const std::string& new_layer_name() { return T::instance()->translate("new_layer.name"); }
    static const std::string& new_layer_title() { return T::instance()->translate("new_layer.title"); }
    static const std::string& new_sprite_advanced_options() { return T::instance()->translate("new_sprite.advanced_options"); }
    static const std::string& new_sprite_background() { return T::instance()->translate("new_sprite.background"); }
    static const std::string& new_sprite_black() { return T::instance()->translate("new_sprite.black"); }
    static const std::string& new_sprite_color_mode() { return T::instance()->translate("new_sprite.color_mode"); }
    static const std::string& new_sprite_double_high() { return T::instance()->translate("new_sprite.double_high"); }
    static const std::string& new_sprite_double_wide() { return T::instance()->translate("new_sprite.double_wide"); }
    static const std::string& new_sprite_grayscale() { return T::instance()->translate("new_sprite.grayscale"); }
    static const std::string& new_sprite_grayscale_tooltip() { return T::instance()->translate("new_sprite.grayscale_tooltip"); }
    static const std::string& new_sprite_height() { return T::instance()->translate("new_sprite.height"); }
    static const std::string& new_sprite_indexed() { return T::instance()->translate("new_sprite.indexed"); }
    static const std::string& new_sprite_indexed_tooltip() { return T::instance()->translate("new_sprite.indexed_tooltip"); }
    static const std::string& new_sprite_pixel_ratio() { return T::instance()->translate("new_sprite.pixel_ratio"); }
    static const std::string& new_sprite_rgba() { return T::instance()->translate("new_sprite.rgba"); }
    static const std::string& new_sprite_rgba_tooltip() { return T::instance()->translate("new_sprite.rgba_tooltip"); }
    static const std::string& new_sprite_size() { return T::instance()->translate("new_sprite.size"); }
    static const std::string& new_sprite_square_pixels() { return T::instance()->translate("new_sprite.square_pixels"); }
    static const std::string& new_sprite_title() { return T::instance()->translate("new_sprite.title"); }
    static const std::string& new_sprite_transparent() { return T::instance()->translate("new_sprite.transparent"); }
    static const std::string& new_sprite_white() { return T::instance()->translate("new_sprite.white"); }
    static const std::string& new_sprite_width() { return T::instance()->translate("new_sprite.width"); }
    static const std::string& open_sequence_agree() { return T::instance()->translate("open_sequence.agree"); }
    static const std::string& open_sequence_description() { return T::instance()->translate("open_sequence.description"); }
    static const std::string& open_sequence_repeat() { return T::instance()->translate("open_sequence.repeat"); }
    static const std::string& open_sequence_skip() { return T::instance()->translate("open_sequence.skip"); }
    static const std::string& open_sequence_title() { return T::instance()->translate("open_sequence.title"); }
    static const std::string& options_10_minutes() { return T::instance()->translate("options.10_minutes"); }
    static const std::string& options_10_seconds() { return T::instance()->translate("options.10_seconds"); }
    static const std::string& options_15_minutes() { return T::instance()->translate("options.15_minutes"); }
    static const std::string& options_1_minute() { return T::instance()->translate("options.1_minute"); }
    static const std::string& options_2_minutes() { return T::instance()->translate("options.2_minutes"); }
    static const std::string& options_30_minutes() { return T::instance()->translate("options.30_minutes"); }
    static const std::string& options_30_seconds() { return T::instance()->translate("options.30_seconds"); }
    static const std::string& options_5_minutes() { return T::instance()->translate("options.5_minutes"); }
    static const std::string& options_add_extension() { return T::instance()->translate("options.add_extension"); }
    static const std::string& options_advanced_mode_alert() { return T::instance()->translate("options.advanced_mode_alert"); }
    static const std::string& options_apply() { return T::instance()->translate("options.apply"); }
    static const std::string& options_auto_guides_color() { return T::instance()->translate("options.auto_guides_color"); }
    static const std::string& options_auto_opaque() { return T::instance()->translate("options.auto_opaque"); }
    static const std::string& options_auto_opaque_tooltip() { return T::instance()->translate("options.auto_opaque_tooltip"); }
    static const std::string& options_auto_save_recovery_data() { return T::instance()->translate("options.auto_save_recovery_data"); }
    static const std::string& options_auto_save_recovery_data_tooltip() { return T::instance()->translate("options.auto_save_recovery_data_tooltip"); }
    static const std::string& options_auto_scroll() { return T::instance()->translate("options.auto_scroll"); }
    static const std::string& options_auto_show_selection_edges() { return T::instance()->translate("options.auto_show_selection_edges"); }
    static const std::string& options_auto_show_selection_edges_tooltip() { return T::instance()->translate("options.auto_show_selection_edges_tooltip"); }
    static const std::string& options_autotimeline() { return T::instance()->translate("options.autotimeline"); }
    static const std::string& options_autotimeline_tooltip() { return T::instance()->translate("options.autotimeline_tooltip"); }
    static const std::string& options_available_themes() { return T::instance()->translate("options.available_themes"); }
    static const std::string& options_bg_apply_zoom() { return T::instance()->translate("options.bg_apply_zoom"); }
    static const std::string& options_bg_checked() { return T::instance()->translate("options.bg_checked"); }
    static const std::string& options_bg_colors() { return T::instance()->translate("options.bg_colors"); }
    static const std::string& options_bg_size() { return T::instance()->translate("options.bg_size"); }
    static const std::string& options_brush_preview() { return T::instance()->translate("options.brush_preview"); }
    static const std::string& options_brush_preview_edges() { return T::instance()->translate("options.brush_preview_edges"); }
    static const std::string& options_brush_preview_full() { return T::instance()->translate("options.brush_preview_full"); }
    static const std::string& options_brush_preview_none() { return T::instance()->translate("options.brush_preview_none"); }
    static const std::string& options_cancel() { return T::instance()->translate("options.cancel"); }
    static const std::string& options_clear_recent_files() { return T::instance()->translate("options.clear_recent_files"); }
    static const std::string& options_clear_recent_files_tooltip() { return T::instance()->translate("options.clear_recent_files_tooltip"); }
    static const std::string& options_crosshair_on_sprite() { return T::instance()->translate("options.crosshair_on_sprite"); }
    static const std::string& options_crosshair_type() { return T::instance()->translate("options.crosshair_type"); }
    static const std::string& options_cursor_color_type() { return T::instance()->translate("options.cursor_color_type"); }
    static const std::string& options_cursor_neg_bw() { return T::instance()->translate("options.cursor_neg_bw"); }
    static const std::string& options_cursor_scale_label() { return T::instance()->translate("options.cursor_scale_label"); }
    static const std::string& options_cursor_specific_color() { return T::instance()->translate("options.cursor_specific_color"); }
    static const std::string& options_default_extension_for() { return T::instance()->translate("options.default_extension_for"); }
    static const std::string& options_default_first_frame() { return T::instance()->translate("options.default_first_frame"); }
    static const std::string& options_default_slice_color() { return T::instance()->translate("options.default_slice_color"); }
    static const std::string& options_disable_extension() { return T::instance()->translate("options.disable_extension"); }
    static const std::string& options_discard_brush() { return T::instance()->translate("options.discard_brush"); }
    static const std::string& options_download_themes() { return T::instance()->translate("options.download_themes"); }
    static const std::string& options_download_translations() { return T::instance()->translate("options.download_translations"); }
    static const std::string& options_editor_selection() { return T::instance()->translate("options.editor_selection"); }
    static const std::string& options_expand_menu_bar_items_on_mouseover() { return T::instance()->translate("options.expand_menu_bar_items_on_mouseover"); }
    static const std::string& options_expand_menu_bar_items_on_mouseover_tooltip() { return T::instance()->translate("options.expand_menu_bar_items_on_mouseover_tooltip"); }
    static const std::string& options_export_animation_default_extension() { return T::instance()->translate("options.export_animation_default_extension"); }
    static const std::string& options_export_animation_in_sequence_alert() { return T::instance()->translate("options.export_animation_in_sequence_alert"); }
    static const std::string& options_export_image_default_extension() { return T::instance()->translate("options.export_image_default_extension"); }
    static const std::string& options_export_sprite_sheet_default_extension() { return T::instance()->translate("options.export_sprite_sheet_default_extension"); }
    static const std::string& options_file_format_doesnt_support_alert() { return T::instance()->translate("options.file_format_doesnt_support_alert"); }
    static const std::string& options_flash_selected_layer() { return T::instance()->translate("options.flash_selected_layer"); }
    static const std::string& options_general() { return T::instance()->translate("options.general"); }
    static const std::string& options_gif_options_alert() { return T::instance()->translate("options.gif_options_alert"); }
    static const std::string& options_gpu_acceleration() { return T::instance()->translate("options.gpu_acceleration"); }
    static const std::string& options_gpu_acceleration_tooltip() { return T::instance()->translate("options.gpu_acceleration_tooltip"); }
    static const std::string& options_grid_auto() { return T::instance()->translate("options.grid_auto"); }
    static const std::string& options_grid_color() { return T::instance()->translate("options.grid_color"); }
    static const std::string& options_grid_height() { return T::instance()->translate("options.grid_height"); }
    static const std::string& options_grid_opacity() { return T::instance()->translate("options.grid_opacity"); }
    static const std::string& options_grid_pixel_grid_color() { return T::instance()->translate("options.grid_pixel_grid_color"); }
    static const std::string& options_grid_pixel_grid_opacity() { return T::instance()->translate("options.grid_pixel_grid_opacity"); }
    static const std::string& options_grid_pixel_grid_visible() { return T::instance()->translate("options.grid_pixel_grid_visible"); }
    static const std::string& options_grid_visible() { return T::instance()->translate("options.grid_visible"); }
    static const std::string& options_grid_width() { return T::instance()->translate("options.grid_width"); }
    static const std::string& options_grid_x() { return T::instance()->translate("options.grid_x"); }
    static const std::string& options_grid_y() { return T::instance()->translate("options.grid_y"); }
    static const std::string& options_guides() { return T::instance()->translate("options.guides"); }
    static const std::string& options_jpeg_options_alert() { return T::instance()->translate("options.jpeg_options_alert"); }
    static const std::string& options_keep_selection_after_clear() { return T::instance()->translate("options.keep_selection_after_clear"); }
    static const std::string& options_keep_selection_after_clear_tooltip() { return T::instance()->translate("options.keep_selection_after_clear_tooltip"); }
    static const std::string& options_language() { return T::instance()->translate("options.language"); }
    static const std::string& options_layer_edges_color() { return T::instance()->translate("options.layer_edges_color"); }
    static const std::string& options_load_wintab_driver() { return T::instance()->translate("options.load_wintab_driver"); }
    static const std::string& options_load_wintab_driver_tooltip() { return T::instance()->translate("options.load_wintab_driver_tooltip"); }
    static const std::string& options_locate_crash_folder() { return T::instance()->translate("options.locate_crash_folder"); }
    static const std::string& options_locate_file() { return T::instance()->translate("options.locate_file"); }
    static const std::string& options_modifiers_disable_handles() { return T::instance()->translate("options.modifiers_disable_handles"); }
    static const std::string& options_modifiers_disable_handles_tooltip() { return T::instance()->translate("options.modifiers_disable_handles_tooltip"); }
    static const std::string& options_move_edges() { return T::instance()->translate("options.move_edges"); }
    static const std::string& options_move_edges_tooltip() { return T::instance()->translate("options.move_edges_tooltip"); }
    static const std::string& options_move_on_add_mode() { return T::instance()->translate("options.move_on_add_mode"); }
    static const std::string& options_move_on_add_mode_tooltip() { return T::instance()->translate("options.move_on_add_mode_tooltip"); }
    static const std::string& options_native_clipboard() { return T::instance()->translate("options.native_clipboard"); }
    static const std::string& options_native_cursor() { return T::instance()->translate("options.native_cursor"); }
    static const std::string& options_native_file_dialog() { return T::instance()->translate("options.native_file_dialog"); }
    static const std::string& options_new_render_engine() { return T::instance()->translate("options.new_render_engine"); }
    static const std::string& options_non_active_layer_opacity() { return T::instance()->translate("options.non_active_layer_opacity"); }
    static const std::string& options_ok() { return T::instance()->translate("options.ok"); }
    static const std::string& options_one_finger_as_mouse_movement() { return T::instance()->translate("options.one_finger_as_mouse_movement"); }
    static const std::string& options_one_finger_as_mouse_movement_tooltip() { return T::instance()->translate("options.one_finger_as_mouse_movement_tooltip"); }
    static const std::string& options_open_extension_folder() { return T::instance()->translate("options.open_extension_folder"); }
    static const std::string& options_open_theme_folder() { return T::instance()->translate("options.open_theme_folder"); }
    static const std::string& options_overwrite_files_on_export_alert() { return T::instance()->translate("options.overwrite_files_on_export_alert"); }
    static const std::string& options_overwrite_files_on_export_sprite_sheet_alert() { return T::instance()->translate("options.overwrite_files_on_export_sprite_sheet_alert"); }
    static const std::string& options_painting_cursors() { return T::instance()->translate("options.painting_cursors"); }
    static const std::string& options_recent_files() { return T::instance()->translate("options.recent_files"); }
    static const std::string& options_recent_files_tooltip() { return T::instance()->translate("options.recent_files_tooltip"); }
    static const std::string& options_reset_alerts() { return T::instance()->translate("options.reset_alerts"); }
    static const std::string& options_reset_bg() { return T::instance()->translate("options.reset_bg"); }
    static const std::string& options_reset_grid() { return T::instance()->translate("options.reset_grid"); }
    static const std::string& options_rewind_on_stop() { return T::instance()->translate("options.rewind_on_stop"); }
    static const std::string& options_rewind_on_stop_tooltip() { return T::instance()->translate("options.rewind_on_stop_tooltip"); }
    static const std::string& options_right_click() { return T::instance()->translate("options.right_click"); }
    static const std::string& options_save_default_extension() { return T::instance()->translate("options.save_default_extension"); }
    static const std::string& options_screen_scaling() { return T::instance()->translate("options.screen_scaling"); }
    static const std::string& options_section_alerts() { return T::instance()->translate("options.section_alerts"); }
    static const std::string& options_section_background() { return T::instance()->translate("options.section_background"); }
    static const std::string& options_section_cursors() { return T::instance()->translate("options.section_cursors"); }
    static const std::string& options_section_editor() { return T::instance()->translate("options.section_editor"); }
    static const std::string& options_section_experimental() { return T::instance()->translate("options.section_experimental"); }
    static const std::string& options_section_extensions() { return T::instance()->translate("options.section_extensions"); }
    static const std::string& options_section_files() { return T::instance()->translate("options.section_files"); }
    static const std::string& options_section_general() { return T::instance()->translate("options.section_general"); }
    static const std::string& options_section_grid() { return T::instance()->translate("options.section_grid"); }
    static const std::string& options_section_guides_and_slices() { return T::instance()->translate("options.section_guides_and_slices"); }
    static const std::string& options_section_selection() { return T::instance()->translate("options.section_selection"); }
    static const std::string& options_section_theme() { return T::instance()->translate("options.section_theme"); }
    static const std::string& options_section_timeline() { return T::instance()->translate("options.section_timeline"); }
    static const std::string& options_section_undo() { return T::instance()->translate("options.section_undo"); }
    static const std::string& options_select_theme() { return T::instance()->translate("options.select_theme"); }
    static const std::string& options_show_full_path() { return T::instance()->translate("options.show_full_path"); }
    static const std::string& options_show_full_path_tooltip() { return T::instance()->translate("options.show_full_path_tooltip"); }
    static const std::string& options_show_home() { return T::instance()->translate("options.show_home"); }
    static const std::string& options_show_menu_bar() { return T::instance()->translate("options.show_menu_bar"); }
    static const std::string& options_show_scrollbars() { return T::instance()->translate("options.show_scrollbars"); }
    static const std::string& options_show_scrollbars_tooltip() { return T::instance()->translate("options.show_scrollbars_tooltip"); }
    static const std::string& options_simple_crosshair() { return T::instance()->translate("options.simple_crosshair"); }
    static const std::string& options_slices() { return T::instance()->translate("options.slices"); }
    static const std::string& options_slide_zoom() { return T::instance()->translate("options.slide_zoom"); }
    static const std::string& options_straight_line_preview() { return T::instance()->translate("options.straight_line_preview"); }
    static const std::string& options_straight_line_preview_tooltip() { return T::instance()->translate("options.straight_line_preview_tooltip"); }
    static const std::string& options_title() { return T::instance()->translate("options.title"); }
    static const std::string& options_ui_mouse_cursor() { return T::instance()->translate("options.ui_mouse_cursor"); }
    static const std::string& options_ui_scaling() { return T::instance()->translate("options.ui_scaling"); }
    static const std::string& options_undo() { return T::instance()->translate("options.undo"); }
    static const std::string& options_undo_allow_nonlinear_history() { return T::instance()->translate("options.undo_allow_nonlinear_history"); }
    static const std::string& options_undo_goto_modified() { return T::instance()->translate("options.undo_goto_modified"); }
    static const std::string& options_undo_goto_modified_tooltip() { return T::instance()->translate("options.undo_goto_modified_tooltip"); }
    static const std::string& options_undo_mb() { return T::instance()->translate("options.undo_mb"); }
    static const std::string& options_undo_size_limit() { return T::instance()->translate("options.undo_size_limit"); }
    static const std::string& options_undo_size_limit_tooltip() { return T::instance()->translate("options.undo_size_limit_tooltip"); }
    static const std::string& options_uninstall_extension() { return T::instance()->translate("options.uninstall_extension"); }
    static const std::string& options_user_interface() { return T::instance()->translate("options.user_interface"); }
    static const std::string& options_wheel_zoom() { return T::instance()->translate("options.wheel_zoom"); }
    static const std::string& options_wintab_more_info() { return T::instance()->translate("options.wintab_more_info"); }
    static const std::string& options_zoom_from_center_with_keys() { return T::instance()->translate("options.zoom_from_center_with_keys"); }
    static const std::string& options_zoom_from_center_with_wheel() { return T::instance()->translate("options.zoom_from_center_with_wheel"); }
    static const std::string& palette_from_sprite_alpha_channel() { return T::instance()->translate("palette_from_sprite.alpha_channel"); }
    static const std::string& palette_from_sprite_new_palette() { return T::instance()->translate("palette_from_sprite.new_palette"); }
    static const std::string& palette_from_sprite_replace_palette() { return T::instance()->translate("palette_from_sprite.replace_palette"); }
    static const std::string& palette_from_sprite_replace_range() { return T::instance()->translate("palette_from_sprite.replace_range"); }
    static const std::string& palette_from_sprite_title() { return T::instance()->translate("palette_from_sprite.title"); }
    static const std::string& palette_popup_load() { return T::instance()->translate("palette_popup.load"); }
    static const std::string& palette_popup_open_folder() { return T::instance()->translate("palette_popup.open_folder"); }
    static const std::string& palette_popup_menu_color_spectrum() { return T::instance()->translate("palette_popup_menu.color_spectrum"); }
    static const std::string& palette_popup_menu_color_tint_shade_tone() { return T::instance()->translate("palette_popup_menu.color_tint_shade_tone"); }
    static const std::string& palette_popup_menu_create_palette_from_current_sprite() { return T::instance()->translate("palette_popup_menu.create_palette_from_current_sprite"); }
    static const std::string& palette_popup_menu_edit_palette() { return T::instance()->translate("palette_popup_menu.edit_palette"); }
    static const std::string& palette_popup_menu_large_size() { return T::instance()->translate("palette_popup_menu.large_size"); }
    static const std::string& palette_popup_menu_load_default_palette() { return T::instance()->translate("palette_popup_menu.load_default_palette"); }
    static const std::string& palette_popup_menu_load_palette() { return T::instance()->translate("palette_popup_menu.load_palette"); }
    static const std::string& palette_popup_menu_medium_size() { return T::instance()->translate("palette_popup_menu.medium_size"); }
    static const std::string& palette_popup_menu_normal_map_color_wheel() { return T::instance()->translate("palette_popup_menu.normal_map_color_wheel"); }
    static const std::string& palette_popup_menu_palette_size() { return T::instance()->translate("palette_popup_menu.palette_size"); }
    static const std::string& palette_popup_menu_rgb_color_wheel() { return T::instance()->translate("palette_popup_menu.rgb_color_wheel"); }
    static const std::string& palette_popup_menu_ryb_color_wheel() { return T::instance()->translate("palette_popup_menu.ryb_color_wheel"); }
    static const std::string& palette_popup_menu_save_as_default_palette() { return T::instance()->translate("palette_popup_menu.save_as_default_palette"); }
    static const std::string& palette_popup_menu_save_palette() { return T::instance()->translate("palette_popup_menu.save_palette"); }
    static const std::string& palette_popup_menu_small_size() { return T::instance()->translate("palette_popup_menu.small_size"); }
    static const std::string& palette_size_number_of_colors() { return T::instance()->translate("palette_size.number_of_colors"); }
    static const std::string& palette_size_title() { return T::instance()->translate("palette_size.title"); }
    static const std::string& paste_text_antialias() { return T::instance()->translate("paste_text.antialias"); }
    static const std::string& paste_text_antialias_tooltip() { return T::instance()->translate("paste_text.antialias_tooltip"); }
    static const std::string& paste_text_color() { return T::instance()->translate("paste_text.color"); }
    static const std::string& paste_text_font() { return T::instance()->translate("paste_text.font"); }
    static const std::string& paste_text_font_size() { return T::instance()->translate("paste_text.font_size"); }
    static const std::string& paste_text_select_font() { return T::instance()->translate("paste_text.select_font"); }
    static const std::string& paste_text_text() { return T::instance()->translate("paste_text.text"); }
    static const std::string& paste_text_title() { return T::instance()->translate("paste_text.title"); }
    static const std::string& replace_color_from() { return T::instance()->translate("replace_color.from"); }
    static const std::string& replace_color_to() { return T::instance()->translate("replace_color.to"); }
    static const std::string& replace_color_tolerance() { return T::instance()->translate("replace_color.tolerance"); }
    static const std::string& select_accelerator_alt() { return T::instance()->translate("select_accelerator.alt"); }
    static const std::string& select_accelerator_assigned_to() { return T::instance()->translate("select_accelerator.assigned_to"); }
    static const std::string& select_accelerator_cancel() { return T::instance()->translate("select_accelerator.cancel"); }
    static const std::string& select_accelerator_clear() { return T::instance()->translate("select_accelerator.clear"); }
    static const std::string& select_accelerator_cmd() { return T::instance()->translate("select_accelerator.cmd"); }
    static const std::string& select_accelerator_ctrl() { return T::instance()->translate("select_accelerator.ctrl"); }
    static const std::string& select_accelerator_key() { return T::instance()->translate("select_accelerator.key"); }
    static const std::string& select_accelerator_modifiers() { return T::instance()->translate("select_accelerator.modifiers"); }
    static const std::string& select_accelerator_ok() { return T::instance()->translate("select_accelerator.ok"); }
    static const std::string& select_accelerator_shift() { return T::instance()->translate("select_accelerator.shift"); }
    static const std::string& select_accelerator_space() { return T::instance()->translate("select_accelerator.space"); }
    static const std::string& select_accelerator_title() { return T::instance()->translate("select_accelerator.title"); }
    static const std::string& select_accelerator_win() { return T::instance()->translate("select_accelerator.win"); }
    static const std::string& send_crash_delete_file() { return T::instance()->translate("send_crash.delete_file"); }
    static const std::string& send_crash_do_it_later() { return T::instance()->translate("send_crash.do_it_later"); }
    static const std::string& send_crash_explaining() { return T::instance()->translate("send_crash.explaining"); }
    static const std::string& send_crash_open_dmp_file() { return T::instance()->translate("send_crash.open_dmp_file"); }
    static const std::string& send_crash_send_file() { return T::instance()->translate("send_crash.send_file"); }
    static const std::string& send_crash_title() { return T::instance()->translate("send_crash.title"); }
    static const std::string& send_crash_to_email() { return T::instance()->translate("send_crash.to_email"); }
    static const std::string& send_crash_using_dev_ver() { return T::instance()->translate("send_crash.using_dev_ver"); }
    static const std::string& slice_popup_menu_delete() { return T::instance()->translate("slice_popup_menu.delete"); }
    static const std::string& slice_popup_menu_properties() { return T::instance()->translate("slice_popup_menu.properties"); }
    static const std::string& slice_properties_bounds() { return T::instance()->translate("slice_properties.bounds"); }
    static const std::string& slice_properties_center() { return T::instance()->translate("slice_properties.center"); }
    static const std::string& slice_properties_height() { return T::instance()->translate("slice_properties.height"); }
    static const std::string& slice_properties_name() { return T::instance()->translate("slice_properties.name"); }
    static const std::string& slice_properties_pivot() { return T::instance()->translate("slice_properties.pivot"); }
    static const std::string& slice_properties_title() { return T::instance()->translate("slice_properties.title"); }
    static const std::string& slice_properties_user_data_tooltip() { return T::instance()->translate("slice_properties.user_data_tooltip"); }
    static const std::string& slice_properties_width() { return T::instance()->translate("slice_properties.width"); }
    static const std::string& slice_properties_x() { return T::instance()->translate("slice_properties.x"); }
    static const std::string& slice_properties_y() { return T::instance()->translate("slice_properties.y"); }
    static const std::string& sprite_properties_advanced() { return T::instance()->translate("sprite_properties.advanced"); }
    static const std::string& sprite_properties_double_high() { return T::instance()->translate("sprite_properties.double_high"); }
    static const std::string& sprite_properties_double_wide() { return T::instance()->translate("sprite_properties.double_wide"); }
    static const std::string& sprite_properties_filename() { return T::instance()->translate("sprite_properties.filename"); }
    static const std::string& sprite_properties_frames() { return T::instance()->translate("sprite_properties.frames"); }
    static const std::string& sprite_properties_pixel_ratio() { return T::instance()->translate("sprite_properties.pixel_ratio"); }
    static const std::string& sprite_properties_size() { return T::instance()->translate("sprite_properties.size"); }
    static const std::string& sprite_properties_square_pixels() { return T::instance()->translate("sprite_properties.square_pixels"); }
    static const std::string& sprite_properties_title() { return T::instance()->translate("sprite_properties.title"); }
    static const std::string& sprite_properties_transparent_color() { return T::instance()->translate("sprite_properties.transparent_color"); }
    static const std::string& sprite_properties_transparent_color_tooltip() { return T::instance()->translate("sprite_properties.transparent_color_tooltip"); }
    static const std::string& sprite_properties_type() { return T::instance()->translate("sprite_properties.type"); }
    static const std::string& sprite_size_height() { return T::instance()->translate("sprite_size.height"); }
    static const std::string& sprite_size_height_perc_tooltip() { return T::instance()->translate("sprite_size.height_perc_tooltip"); }
    static const std::string& sprite_size_height_px_tooltip() { return T::instance()->translate("sprite_size.height_px_tooltip"); }
    static const std::string& sprite_size_interpolation() { return T::instance()->translate("sprite_size.interpolation"); }
    static const std::string& sprite_size_lock_ratio() { return T::instance()->translate("sprite_size.lock_ratio"); }
    static const std::string& sprite_size_method() { return T::instance()->translate("sprite_size.method"); }
    static const std::string& sprite_size_percentage() { return T::instance()->translate("sprite_size.percentage"); }
    static const std::string& sprite_size_pixels() { return T::instance()->translate("sprite_size.pixels"); }
    static const std::string& sprite_size_title() { return T::instance()->translate("sprite_size.title"); }
    static const std::string& sprite_size_width() { return T::instance()->translate("sprite_size.width"); }
    static const std::string& sprite_size_width_perc_tooltip() { return T::instance()->translate("sprite_size.width_perc_tooltip"); }
    static const std::string& sprite_size_width_px_tooltip() { return T::instance()->translate("sprite_size.width_px_tooltip"); }
    static const std::string& statusbar_tips_all_layers_are_locked() { return T::instance()->translate("statusbar_tips.all_layers_are_locked"); }
    static const std::string& tab_popup_menu_close() { return T::instance()->translate("tab_popup_menu.close"); }
    static const std::string& timeline_conf_behind_sprite() { return T::instance()->translate("timeline_conf.behind_sprite"); }
    static const std::string& timeline_conf_behind_sprite_toolip() { return T::instance()->translate("timeline_conf.behind_sprite_toolip"); }
    static const std::string& timeline_conf_bottom() { return T::instance()->translate("timeline_conf.bottom"); }
    static const std::string& timeline_conf_current_layer() { return T::instance()->translate("timeline_conf.current_layer"); }
    static const std::string& timeline_conf_first_frame() { return T::instance()->translate("timeline_conf.first_frame"); }
    static const std::string& timeline_conf_frame_header() { return T::instance()->translate("timeline_conf.frame_header"); }
    static const std::string& timeline_conf_in_front() { return T::instance()->translate("timeline_conf.in_front"); }
    static const std::string& timeline_conf_in_front_toolip() { return T::instance()->translate("timeline_conf.in_front_toolip"); }
    static const std::string& timeline_conf_left() { return T::instance()->translate("timeline_conf.left"); }
    static const std::string& timeline_conf_loop_tags() { return T::instance()->translate("timeline_conf.loop_tags"); }
    static const std::string& timeline_conf_merge_frames() { return T::instance()->translate("timeline_conf.merge_frames"); }
    static const std::string& timeline_conf_onion_skin() { return T::instance()->translate("timeline_conf.onion_skin"); }
    static const std::string& timeline_conf_opacity() { return T::instance()->translate("timeline_conf.opacity"); }
    static const std::string& timeline_conf_opacity_step() { return T::instance()->translate("timeline_conf.opacity_step"); }
    static const std::string& timeline_conf_overlay_size() { return T::instance()->translate("timeline_conf.overlay_size"); }
    static const std::string& timeline_conf_position() { return T::instance()->translate("timeline_conf.position"); }
    static const std::string& timeline_conf_red_blue_tint() { return T::instance()->translate("timeline_conf.red_blue_tint"); }
    static const std::string& timeline_conf_reset() { return T::instance()->translate("timeline_conf.reset"); }
    static const std::string& timeline_conf_right() { return T::instance()->translate("timeline_conf.right"); }
    static const std::string& timeline_conf_thumbnail_size() { return T::instance()->translate("timeline_conf.thumbnail_size"); }
    static const std::string& timeline_conf_thumbnails() { return T::instance()->translate("timeline_conf.thumbnails"); }
    static const std::string& tools_blur() { return T::instance()->translate("tools.blur"); }
    static const std::string& tools_contour() { return T::instance()->translate("tools.contour"); }
    static const std::string& tools_curve() { return T::instance()->translate("tools.curve"); }
    static const std::string& tools_ellipse() { return T::instance()->translate("tools.ellipse"); }
    static const std::string& tools_elliptical_marquee() { return T::instance()->translate("tools.elliptical_marquee"); }
    static const std::string& tools_eraser() { return T::instance()->translate("tools.eraser"); }
    static const std::string& tools_eraser_tooltip() { return T::instance()->translate("tools.eraser_tooltip"); }
    static const std::string& tools_eyedropper() { return T::instance()->translate("tools.eyedropper"); }
    static const std::string& tools_filled_ellipse() { return T::instance()->translate("tools.filled_ellipse"); }
    static const std::string& tools_filled_rectangle() { return T::instance()->translate("tools.filled_rectangle"); }
    static const std::string& tools_gradient() { return T::instance()->translate("tools.gradient"); }
    static const std::string& tools_hand() { return T::instance()->translate("tools.hand"); }
    static const std::string& tools_jumble() { return T::instance()->translate("tools.jumble"); }
    static const std::string& tools_lasso_tool() { return T::instance()->translate("tools.lasso_tool"); }
    static const std::string& tools_line() { return T::instance()->translate("tools.line"); }
    static const std::string& tools_magic_wand() { return T::instance()->translate("tools.magic_wand"); }
    static const std::string& tools_move() { return T::instance()->translate("tools.move"); }
    static const std::string& tools_paint_bucket() { return T::instance()->translate("tools.paint_bucket"); }
    static const std::string& tools_pencil() { return T::instance()->translate("tools.pencil"); }
    static const std::string& tools_polygon() { return T::instance()->translate("tools.polygon"); }
    static const std::string& tools_polygonal_lasso() { return T::instance()->translate("tools.polygonal_lasso"); }
    static const std::string& tools_preview_hide() { return T::instance()->translate("tools.preview_hide"); }
    static const std::string& tools_preview_show() { return T::instance()->translate("tools.preview_show"); }
    static const std::string& tools_rectangle() { return T::instance()->translate("tools.rectangle"); }
    static const std::string& tools_rectangular_marquee() { return T::instance()->translate("tools.rectangular_marquee"); }
    static const std::string& tools_selection_tooltip() { return T::instance()->translate("tools.selection_tooltip"); }
    static const std::string& tools_shortcut() { return T::instance()->translate("tools.shortcut"); }
    static const std::string& tools_slice() { return T::instance()->translate("tools.slice"); }
    static const std::string& tools_spray() { return T::instance()->translate("tools.spray"); }
    static const std::string& tools_zoom() { return T::instance()->translate("tools.zoom"); }
    static const std::string& undo_history_title() { return T::instance()->translate("undo_history.title"); }
    static const std::string& user_data_color() { return T::instance()->translate("user_data.color"); }
    static const std::string& user_data_user_data() { return T::instance()->translate("user_data.user_data"); }
    static const std::string& webp_options_animation_loop() { return T::instance()->translate("webp_options.animation_loop"); }
    static const std::string& webp_options_compression() { return T::instance()->translate("webp_options.compression"); }
    static const std::string& webp_options_image_hint() { return T::instance()->translate("webp_options.image_hint"); }
    static const std::string& webp_options_image_hint_default() { return T::instance()->translate("webp_options.image_hint_default"); }
    static const std::string& webp_options_image_hint_graph() { return T::instance()->translate("webp_options.image_hint_graph"); }
    static const std::string& webp_options_image_hint_photo() { return T::instance()->translate("webp_options.image_hint_photo"); }
    static const std::string& webp_options_image_hint_picture() { return T::instance()->translate("webp_options.image_hint_picture"); }
    static const std::string& webp_options_image_preset() { return T::instance()->translate("webp_options.image_preset"); }
    static const std::string& webp_options_image_preset_default() { return T::instance()->translate("webp_options.image_preset_default"); }
    static const std::string& webp_options_image_preset_drawing() { return T::instance()->translate("webp_options.image_preset_drawing"); }
    static const std::string& webp_options_image_preset_icon() { return T::instance()->translate("webp_options.image_preset_icon"); }
    static const std::string& webp_options_image_preset_photo() { return T::instance()->translate("webp_options.image_preset_photo"); }
    static const std::string& webp_options_image_preset_picture() { return T::instance()->translate("webp_options.image_preset_picture"); }
    static const std::string& webp_options_image_preset_text() { return T::instance()->translate("webp_options.image_preset_text"); }
    static const std::string& webp_options_lossless_webp() { return T::instance()->translate("webp_options.lossless_webp"); }
    static const std::string& webp_options_lossy_webp() { return T::instance()->translate("webp_options.lossy_webp"); }
    static const std::string& webp_options_quality() { return T::instance()->translate("webp_options.quality"); }
    static const std::string& webp_options_save_as() { return T::instance()->translate("webp_options.save_as"); }
    static const std::string& webp_options_simple_webp() { return T::instance()->translate("webp_options.simple_webp"); }
    static const std::string& webp_options_title() { return T::instance()->translate("webp_options.title"); }
    static const std::string& webp_options_type() { return T::instance()->translate("webp_options.type"); }
  };

} // namespace gen
} // namespace app

#endif
